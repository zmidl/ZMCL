<Button x:Class="ZMCL.MyControl.UcGlassButton"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" >

    <Button.Style>
        <Style TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="Effect" >
                <Setter.Value>
                    <!--<DropShadowEffect Color="#99343030" BlurRadius="10"/>-->
                    <DropShadowEffect Color="Black" Direction="12" ShadowDepth="1" Opacity="10" />
                </Setter.Value>
            </Setter>
            <Setter Property="Background" >
                <Setter.Value>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                        <GradientStop Color="DarkGray" Offset="0" />
                        <GradientStop Color="#FFF3F4CE" Offset="0.5" />
                        <GradientStop Color="DarkGray" Offset="1" />
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="Width" Value="auto" />
            <Setter Property="Margin" Value="10" />
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Height" Value="auto"/>
            <Setter Property="Foreground" Value="#FF747474"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid
                                    Width="{TemplateBinding Width}" 
                                    Height="{TemplateBinding Height}" 
                                    ClipToBounds="True" >

                            <!-- Outer Rectangle with rounded corners. -->
                            <Ellipse 
                                        x:Name="outerRectangle" 
                                        HorizontalAlignment="Stretch"  
                                        VerticalAlignment="Stretch" 
                                        Stroke="{TemplateBinding Background}" 
                                        StrokeThickness="5" 
                                        Fill="Transparent" />


                            <!-- Inner Rectangle with rounded corners. -->
                            <Ellipse 
                            x:Name="innerRectangle" 
                            HorizontalAlignment="Stretch" 
                            VerticalAlignment="Stretch" 
                            Stroke="Transparent" 
                            StrokeThickness="20" 
                            Fill="{TemplateBinding Background}" 
                             />

                            <!-- Glass Rectangle -->
                            <Ellipse 
                            x:Name="glassCube" 
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            StrokeThickness="2" 
                           
                            Opacity="60"
                            
                            RenderTransformOrigin="0.5,0.5">
                                <Ellipse.Stroke>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStop Offset="0.0" Color="Gold" />
                                            <GradientStop Offset="1.0" Color="Gray" />
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Ellipse.Stroke>
                                <Ellipse.Fill>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,1" Opacity="60" >
                                        <GradientStopCollection>
                                            <GradientStop Color="White" Offset="0.2" />
                                            <GradientStop Color="Transparent" Offset="0.4" />
                                            <GradientStop Color="WhiteSmoke" Offset="0.5" />
                                            <GradientStop Color="Transparent" Offset="0.75" />
                                            <GradientStop Color="WhiteSmoke" Offset="0.9" />
                                            <GradientStop Color="Transparent" Offset="1" />
                                        </GradientStopCollection>
                                    </LinearGradientBrush>
                                </Ellipse.Fill>
                                <!-- These transforms have no effect as they 
             are declared here. 
             The reason the transforms are included is to be targets 
             for animation (see later). -->
                                <Ellipse.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <RotateTransform />
                                    </TransformGroup>
                                </Ellipse.RenderTransform>

                                <!-- A BevelBitmapEffect is applied to give the button a 
               "Beveled" look. -->
                                <Ellipse.BitmapEffect>
                                    <BevelBitmapEffect />
                                </Ellipse.BitmapEffect>
                            </Ellipse>

                            <!-- Present Text of the button. -->
                            <DockPanel Name="myContentPresenterDockPanel">
                                <ContentPresenter 
                                x:Name="myContentPresenter" 
                                
                                VerticalAlignment="Center" 
                                HorizontalAlignment="Center" 
                                Content="{TemplateBinding  Content}"
                                TextBlock.Foreground="{TemplateBinding Foreground}" />
                            </DockPanel>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <EventTrigger RoutedEvent="Button.Click">
                                <EventTrigger.Actions>
                                    <BeginStoryboard Name="mouseEnterBeginStoryboard">
                                        <Storyboard>

                                            <!-- This animation makes the glass rectangle shrink in the X direction. -->
                                            <DoubleAnimation Storyboard.TargetName="glassCube" 
          Storyboard.TargetProperty=
          "(Rectangle.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
          By="-0.3" Duration="0:0:0.5" />

                                            <!-- This animation makes the glass rectangle shrink in the Y direction. -->
                                            <DoubleAnimation
        Storyboard.TargetName="glassCube" 
          Storyboard.TargetProperty=
          "(Rectangle.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" 
          By="-0.3" Duration="0:0:0.5" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger.Actions>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="Mouse.MouseLeave">
                                <EventTrigger.Actions>
                                    <!-- Stopping the storyboard sets all animated properties back to default. -->

                                    <BeginStoryboard>
                                        <Storyboard >
                                            <DoubleAnimation Storyboard.TargetName="glassCube"
                          Storyboard.TargetProperty=" (Rectangle.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)" 
                           To="0"  Duration="0:0:0.1">
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </BeginStoryboard>


                                    <StopStoryboard BeginStoryboardName="mouseEnterBeginStoryboard" />


                                </EventTrigger.Actions>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="Mouse.MouseEnter">

                                <EventTrigger.Actions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="glassCube" 
          Storyboard.TargetProperty=
          "(Rectangle.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)" 
          By="360" Duration="0:0:0.4" />
                                        </Storyboard>
                                    </BeginStoryboard>

                                </EventTrigger.Actions>
                            </EventTrigger>
                            <Trigger Property="IsMouseOver" Value="True">

                                <!-- Below are three property settings that occur when the 
         condition is met (user mouses over button).  -->
                                <!-- Change the color of the outer rectangle when user          mouses over it. -->
                                <Setter Property ="Rectangle.Stroke" TargetName="outerRectangle"
      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />

                                <!-- Sets the glass opacity to 1, therefore, the          glass "appears" when user mouses over it. -->
                                <Setter Property="Rectangle.Opacity" Value="1"       TargetName="glassCube" />

                                <!-- Makes the text slightly blurry as though you were          looking at it through blurry glass. -->
                                <Setter Property="ContentPresenter.BitmapEffect"       TargetName="myContentPresenter">
                                    <Setter.Value>
                                        <BlurBitmapEffect Radius="1" />
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <!-- Set properties when button has focus. -->
                            <Trigger Property="IsFocused" Value="true">
                                <Setter Property="Rectangle.Opacity" Value="1"       TargetName="glassCube" />
                                <Setter Property="Rectangle.Stroke" TargetName="outerRectangle"
      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                                <Setter Property="Rectangle.Opacity" Value="1" TargetName="glassCube" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Button.Style>
</Button>
